{"paragraphs":[{"text":"%pyspark\r\nfrom pyspark.sql.types import StructType\r\nfrom pyspark.sql.types import *\r\n\r\n\r\nschema = StructType([\r\n    StructField(\"id\", StringType()),\r\n    StructField(\"name\", StringType()),\r\n    StructField(\"host_id\", StringType()),\r\n    StructField(\"host_name\", StringType()),\r\n    StructField(\"neighbourhood_group\", StringType()),\r\n    StructField(\"neighbourhood\", StringType()),\r\n    StructField(\"latitude\", FloatType()),\r\n    StructField(\"longitude\", FloatType()),\r\n    StructField(\"room_type\", StringType()),\r\n    StructField(\"price\", StringType()),\r\n    StructField(\"minimum_nights\", StringType()),\r\n    StructField(\"number_of_reviews\", StringType()),\r\n    StructField(\"last_review\", StringType()),\r\n    StructField(\"reviews_per_month\", StringType()),\r\n    StructField(\"calculated_host_listings_count\", StringType()),\r\n    StructField(\"availability_365\", StringType()),\r\n])\r\nsourceDS = spark.read.csv(\r\n    \"/data/mllib/listings.csv\", header=True , schema = schema\r\n)\r\n\r\n\r\nallowners = sourceDS.select(\"host_id\", \"room_type\").groupBy(\"host_id\").count()\r\nprint(allowners.count())\r\nprint(sourceDS.count())\r\n\r\nlessThanTwoOwners = allowners.filter(~allowners[\"count\"].isin([\"1\",\"0\"]))\r\n\r\nallownersCount = ownersAndCount.count()\r\nlessThanTwoOwnersCount = lessThanTwoOwners.count()\r\n\r\n# print(allownersCount)\r\n# print(lessThanTwoOwnersCount)\r\n\r\nresult = (allownersCount - lessThanTwoOwnersCount) / (allownersCount + 0.0) * 100\r\n\r\nprint(result)\r\n","user":"anonymous","dateUpdated":"2020-01-05T05:47:31+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"2709\n7921\n72.6836471023\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=1262","http://172.17.0.2:4040/jobs/job?id=1263","http://172.17.0.2:4040/jobs/job?id=1264","http://172.17.0.2:4040/jobs/job?id=1265"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1578169165725_-1418405004","id":"20200104-201925_948021470","dateCreated":"2020-01-04T20:19:25+0000","dateStarted":"2020-01-05T05:47:31+0000","dateFinished":"2020-01-05T05:47:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8287"},{"text":"%pyspark\r\nfrom pyspark.sql.types import StructType\r\nfrom pyspark.sql.types import *\r\nfrom pyspark.sql.window import Window\r\nfrom pyspark.sql.functions import rank, col\r\n\r\n\r\nschema = StructType([\r\n    StructField(\"id\", StringType()),\r\n    StructField(\"name\", StringType()),\r\n    StructField(\"host_id\", StringType()),\r\n    StructField(\"host_name\", StringType()),\r\n    StructField(\"neighbourhood_group\", StringType()),\r\n    StructField(\"neighbourhood\", StringType()),\r\n    StructField(\"latitude\", FloatType()),\r\n    StructField(\"longitude\", FloatType()),\r\n    StructField(\"room_type\", StringType()),\r\n    StructField(\"price\", IntegerType()),\r\n    StructField(\"minimum_nights\", StringType()),\r\n    StructField(\"number_of_reviews\", StringType()),\r\n    StructField(\"last_review\", StringType()),\r\n    StructField(\"reviews_per_month\", StringType()),\r\n    StructField(\"calculated_host_listings_count\", StringType()),\r\n    StructField(\"availability_365\", IntegerType())\r\n    \r\n])\r\nsourceDS = spark.read.csv(\r\n    \"/data/mllib/listings.csv\", header=True , schema = schema\r\n)\r\n\r\nrential = sourceDS.select(\"id\", \"price\", \"neighbourhood\", \"availability_365\")\r\n# rential1 = rential.filter(~rential[\"availability_365\"].isin([\"365\"]))\r\n# rential.show(1000)\r\n# rential.filter('availability_365 in (\"365\")').count()\r\n\r\nrential = rential.filter(rential.availability_365 == 365)\r\nrential = rential.drop(\"availability_365\")\r\n\r\nwindow = Window.partitionBy(rential['neighbourhood']).orderBy(rential['price'].desc())\r\n\r\nresult = rential.select('*', rank().over(window).alias('rank')).filter(col('rank') <= 5) \r\n\r\nresult.show(1000)\r\n","user":"anonymous","dateUpdated":"2020-01-05T06:03:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578169192906_2038696399","id":"20200104-201952_1974416645","dateCreated":"2020-01-04T20:19:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:8288","dateFinished":"2020-01-05T06:02:39+0000","dateStarted":"2020-01-05T06:02:38+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-----+--------------------+----+\n|      id|price|       neighbourhood|rank|\n+--------+-----+--------------------+----+\n|12583148| 1300|             Geylang|   1|\n|26429896| 1200|             Geylang|   2|\n|31241900|  887|             Geylang|   3|\n|29802106|  687|             Geylang|   4|\n|27105520|  587|             Geylang|   5|\n|37340215|  587|             Geylang|   5|\n| 2450232|  500|Central Water Cat...|   1|\n|34922569|  287|Central Water Cat...|   2|\n|33755957|  199|Central Water Cat...|   3|\n|29367383|   58|Central Water Cat...|   4|\n|37899526|   44|Central Water Cat...|   5|\n|29665640|  728|         Jurong West|   1|\n|29721827|  687|         Jurong West|   2|\n| 4122361|  268|         Jurong West|   3|\n|17083178|  268|         Jurong West|   3|\n|17765940|  268|         Jurong West|   3|\n|37634184|  119|        Sungei Kadut|   1|\n|37947187|  381|             Orchard|   1|\n|19595827|  365|             Orchard|   2|\n|11555620|  151|             Orchard|   3|\n|29287330|  136|             Orchard|   4|\n|31500076|   75|             Orchard|   5|\n|37732425| 1500|              Rochor|   1|\n|37370664|  800|              Rochor|   2|\n|37065724|  700|              Rochor|   3|\n|31271940|  650|              Rochor|   4|\n|27778266|  550|              Rochor|   5|\n|28013972|  550|              Rochor|   5|\n|34216019|  550|              Rochor|   5|\n|34258806|  550|              Rochor|   5|\n|34605981|  550|              Rochor|   5|\n| 8957125| 1019|         Bukit Merah|   1|\n| 5529062|  500|         Bukit Merah|   2|\n|19020434|  387|         Bukit Merah|   3|\n| 9398808|  300|         Bukit Merah|   4|\n|32366019|  151|         Bukit Merah|   5|\n|36652759| 5000|               Bedok|   1|\n|24235192|  331|               Bedok|   2|\n|23969042|  300|               Bedok|   3|\n|  823571|  278|               Bedok|   4|\n| 6723509|  219|               Bedok|   5|\n|11615301|  219|               Bedok|   5|\n|11616119|  219|               Bedok|   5|\n|11616187|  219|               Bedok|   5|\n|16054752|   54|Western Water Cat...|   1|\n|38108273|  550|             Tanglin|   1|\n|18677983|  310|             Tanglin|   2|\n|34243743|  199|             Tanglin|   3|\n|36747812|  194|             Tanglin|   4|\n|27379875|  168|             Tanglin|   5|\n|11567069|  900|              Newton|   1|\n|33172361|  381|              Newton|   2|\n|37437653|  300|              Newton|   3|\n|34586323|  162|              Newton|   4|\n|11555697|  151|              Newton|   5|\n|28346551|   65|        Lim Chu Kang|   1|\n| 4583589|  165|           Woodlands|   1|\n|16715096|   99|           Woodlands|   2|\n|25468316|   90|           Woodlands|   3|\n|27611866|   90|           Woodlands|   3|\n|   49091|   83|           Woodlands|   5|\n|27000082|  206|         Bukit Timah|   1|\n|33047952|  156|         Bukit Timah|   2|\n|33048147|  156|         Bukit Timah|   2|\n|   50646|   81|         Bukit Timah|   4|\n|35429425|   81|         Bukit Timah|   4|\n|36324726|  460|        River Valley|   1|\n|32050840|  294|        River Valley|   2|\n|34375804|  200|        River Valley|   3|\n|33888989|  162|        River Valley|   4|\n|36194644|  161|        River Valley|   5|\n|21018087|  340|          Queenstown|   1|\n|34052336|  300|          Queenstown|   2|\n|20097996|  269|          Queenstown|   3|\n|27004873|  240|          Queenstown|   4|\n|21032252|  225|          Queenstown|   5|\n|28035480|  800|             Kallang|   1|\n|26892907|  750|             Kallang|   2|\n|31576001|  700|             Kallang|   3|\n|32022211|  700|             Kallang|   3|\n|28040281|  600|             Kallang|   5|\n|  768313|  167|             Punggol|   1|\n|18209347|  139|             Punggol|   2|\n|  948105|   76|             Punggol|   3|\n| 6147375|   49|             Punggol|   4|\n| 7766300|   44|             Punggol|   5|\n|14131949|  131|           Serangoon|   1|\n|10185535|  125|           Serangoon|   2|\n|19720477|  125|           Serangoon|   2|\n|20859006|  118|           Serangoon|   4|\n|15001844|   65|           Serangoon|   5|\n|19832720|  319|            Clementi|   1|\n|21031651|  300|            Clementi|   2|\n|10758720|  161|            Clementi|   3|\n|20729472|   56|            Clementi|   4|\n|18286281|   51|            Clementi|   5|\n|27004656|  262|       Marine Parade|   1|\n|37577304|  169|       Marine Parade|   2|\n|30280422|   69|       Marine Parade|   3|\n|23366776|   50|       Marine Parade|   4|\n|11544732| 7000|              Outram|   1|\n| 4013186|  950|              Outram|   2|\n|24685550|  533|              Outram|   3|\n|30385261|  300|              Outram|   4|\n|35041255|  281|              Outram|   5|\n| 9019945|  250|       Downtown Core|   1|\n| 9204908|  250|       Downtown Core|   1|\n|11898518|  237|       Downtown Core|   3|\n|37344187|  219|       Downtown Core|   4|\n|18378142|  181|       Downtown Core|   5|\n| 1756811|  550|           Sembawang|   1|\n|10210475|  110|           Sembawang|   2|\n|20774506|  110|           Sembawang|   2|\n| 9875315|   90|           Sembawang|   4|\n|17112396|   82|           Sembawang|   5|\n|18848925|  401|              Novena|   1|\n|15709193|  319|              Novena|   2|\n| 5241732|  300|              Novena|   3|\n| 5282397|  300|              Novena|   3|\n| 6206621|  300|              Novena|   3|\n| 7903503|  300|              Novena|   3|\n|33573944|  415|            Sengkang|   1|\n|12253611|   90|            Sengkang|   2|\n|19299883|   53|            Sengkang|   3|\n|32776098|   51|            Sengkang|   4|\n|18492843|   40|            Sengkang|   5|\n|25269747|  550|          Ang Mo Kio|   1|\n| 8727077|  278|          Ang Mo Kio|   2|\n| 1643945|  217|          Ang Mo Kio|   3|\n|25876380|  181|          Ang Mo Kio|   4|\n|24075378|  169|          Ang Mo Kio|   5|\n| 5704432|  300|           Toa Payoh|   1|\n|35597216|  300|           Toa Payoh|   1|\n| 3078453|  228|           Toa Payoh|   3|\n|33698332|  200|           Toa Payoh|   4|\n| 9243492|  187|           Toa Payoh|   5|\n|34826381|  187|           Toa Payoh|   5|\n|21929427|  169|     Singapore River|   1|\n|17927897|  160|     Singapore River|   2|\n|24782472|  160|     Singapore River|   2|\n| 2351979|  150|     Singapore River|   4|\n|33029341|  150|     Singapore River|   4|\n| 5283776|  650|            Tampines|   1|\n| 6939552|  200|            Tampines|   2|\n|25310826|  115|            Tampines|   3|\n| 5798211|   85|            Tampines|   4|\n|18951953|   85|            Tampines|   4|\n|20715404|  181|         Jurong East|   1|\n|20717207|  181|         Jurong East|   1|\n|20999219|  181|         Jurong East|   1|\n|20659559|  150|         Jurong East|   4|\n|20982852|  140|         Jurong East|   5|\n|30044847|  140|         Jurong East|   5|\n|11443170|  208|           Pasir Ris|   1|\n| 3349976|   81|           Pasir Ris|   2|\n|37947662|   60|           Pasir Ris|   3|\n| 8583021|   31|           Pasir Ris|   4|\n|13615155|  500|              Yishun|   1|\n|30484500|  350|              Yishun|   2|\n| 8004648|   94|              Yishun|   3|\n|29581333|   81|              Yishun|   4|\n|16578603|   21|              Yishun|   5|\n|11325779|  200|         Bukit Batok|   1|\n| 3927431|  156|         Bukit Batok|   2|\n|16532566|   87|         Bukit Batok|   3|\n| 1646909|   82|         Bukit Batok|   4|\n|32659248|   81|         Bukit Batok|   5|\n|31653300|  450|              Museum|   1|\n|34914780|  208|              Museum|   2|\n|32343985|  168|              Museum|   3|\n|33692920|  158|              Museum|   4|\n|27791766|  149|              Museum|   5|\n| 2566687| 1200|       Choa Chu Kang|   1|\n|11411094|  100|       Choa Chu Kang|   2|\n|31965730|   78|       Choa Chu Kang|   3|\n| 1813277|   60|       Choa Chu Kang|   4|\n| 2851984|   31|       Choa Chu Kang|   5|\n|37267211|   26|       Bukit Panjang|   1|\n| 6837947| 2300|             Hougang|   1|\n|33432585|  750|             Hougang|   2|\n|13175926|  119|             Hougang|   3|\n|36882509|   85|             Hougang|   4|\n| 4934283|   35|             Hougang|   5|\n|28116713|  500|              Bishan|   1|\n|12377633|  233|              Bishan|   2|\n|11128602|  200|              Bishan|   3|\n|14774554|  190|              Bishan|   4|\n|28114931|   69|              Bishan|   5|\n|31776450|  865|    Southern Islands|   1|\n+--------+-----+--------------------+----+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=1326","http://172.17.0.2:4040/jobs/job?id=1327","http://172.17.0.2:4040/jobs/job?id=1328","http://172.17.0.2:4040/jobs/job?id=1329","http://172.17.0.2:4040/jobs/job?id=1330"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n\nfrom pyspark.sql.window import Window\nfrom pyspark.sql.functions import rank, col\n \n\n\ndf = spark.createDataFrame(\n    [\n        (\"James\",\"Sales\",3000),\n        (\"Michael\",\"Sales\",4600),\n        (\"Robert\",\"Sales\",4100),\n        (\"Maria\",\"Finance\",3000),\n        (\"Raman\",\"Finance\",3000),\n        (\"Scott\",\"Finance\",3300),\n        (\"Jen\",\"Finance\",3900),\n        (\"Jeff\",\"Marketing\",3000),\n        (\"Kumar\",\"Marketing\",2000)\n    ],\n    ['Name', 'Department','Salary'] # add your columns label here\n)\n\ndf.show()\n\nw2 = Window.partitionBy(\"department\").orderBy(col(\"salary\"))\n\ndf.withColumn(\"row\",w2.over(w2)).where(\"row\" == 1).drop(\"row\").show()\n","user":"anonymous","dateUpdated":"2020-01-05T05:38:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578195647913_-586224963","id":"20200105-034047_1595530738","dateCreated":"2020-01-05T03:40:47+0000","status":"ERROR","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:8443","dateFinished":"2020-01-05T05:38:48+0000","dateStarted":"2020-01-05T05:38:48+0000","errorMessage":""},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2020-01-05T05:08:05+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1578200885178_-1874674114","id":"20200105-050805_1419388286","dateCreated":"2020-01-05T05:08:05+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:11846"}],"name":"SparkAssignment","id":"2EXKTRYWV","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}